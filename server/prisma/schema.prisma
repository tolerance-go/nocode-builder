// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            Int                            @id @default(autoincrement())
  name                          String                         @unique
  email                         String?                        @unique
  password                      String
  projects                      Project[]
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @updatedAt
  projectGroups                 ProjectGroup[]
  isAdmin                       Boolean                        @default(false)
  widgets                       Widget[]
  widgetSlots                   WidgetSlot[]
  widgetLibs                    WidgetLib[]
  widgetSlotAssignments         WidgetSlotAssignment[]
  widgetSlotInstanceAssignments WidgetSlotInstanceAssignment[]
  widgetInstances               WidgetInstance[]
  widgetSlotInstances           WidgetSlotInstance[]
  viewProjects                  ViewProject[]
  dataTableProjects             DataTableProject[]
  bluemapProjects               BluemapProject[]
}

model Project {
  id              Int           @id
  name            String
  ownerId         Int
  owner           User          @relation(fields: [ownerId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  projectGroup    ProjectGroup? @relation(fields: [projectGroupId], references: [id])
  projectGroupId  Int?
  type            ProjectType
  projectDetail   ProjectDetail @relation(fields: [projectDetailId], references: [id])
  projectDetailId Int
}

model ProjectDetail {
  id                 Int               @id
  viewProject        ViewProject?      @relation(fields: [viewProjectId], references: [id])
  viewProjectId      Int?
  dataTableProject   DataTableProject? @relation(fields: [dataTableProjectId], references: [id])
  dataTableProjectId Int?
  bluemapProject     BluemapProject?   @relation(fields: [bluemapProjectId], references: [id])
  bluemapProjectId   Int?
  Project            Project[]
}

model ViewProject {
  id           Int                @id
  platformType WidgetPlatformType

  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectDetails  ProjectDetail[]
  widgetInstances WidgetInstance[]
}

model DataTableProject {
  id             Int             @id
  projectDetails ProjectDetail[]
  ownerId        Int
  owner          User            @relation(fields: [ownerId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model BluemapProject {
  id             Int             @id
  projectDetails ProjectDetail[]
  ownerId        Int
  owner          User            @relation(fields: [ownerId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model ProjectGroup {
  id            Int            @id
  name          String
  parentGroupId Int?
  parentGroup   ProjectGroup?  @relation("ChildGroups", fields: [parentGroupId], references: [id])
  childGroups   ProjectGroup[] @relation("ChildGroups")
  ownerId       Int
  owner         User           @relation(fields: [ownerId], references: [id])
  projects      Project[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model WidgetLib {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  widgets   Widget[]
  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WidgetInstance {
  id                            Int                            @id
  widget                        Widget                         @relation(fields: [widgetId], references: [id])
  widgetId                      Int
  parentSlot                    WidgetSlotInstance?            @relation(fields: [parentSlotId], references: [id])
  parentSlotId                  Int?
  // 在插槽中的 index 顺序，从 0 开始
  order                         Int?
  widgetSlotInstanceAssignments WidgetSlotInstanceAssignment[]
  viewProject                   ViewProject?                   @relation(fields: [viewProjectId], references: [id])
  viewProjectId                 Int?

  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WidgetSlotInstance {
  id                            Int                            @id
  widgetSlot                    WidgetSlot                     @relation(fields: [widgetSlotId], references: [id])
  widgetSlotId                  Int
  widgetSlotInstanceAssignments WidgetSlotInstanceAssignment[]
  childWidgetInstances          WidgetInstance[]

  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WidgetSlotInstanceAssignment {
  widgetInstanceId Int
  slotInstanceId   Int
  widgetInstance   WidgetInstance     @relation(fields: [widgetInstanceId], references: [id])
  slotInstance     WidgetSlotInstance @relation(fields: [slotInstanceId], references: [id])
  ownerId          Int
  owner            User               @relation(fields: [ownerId], references: [id])
  assignedAt       DateTime           @default(now())

  @@id([widgetInstanceId, slotInstanceId])
}

model Widget {
  id                    Int                    @id @default(autoincrement())
  name                  String
  platforms             WidgetPlatformType[]
  widgetSlotAssignments WidgetSlotAssignment[]
  ownerId               Int
  owner                 User                   @relation(fields: [ownerId], references: [id])
  widgetLib             WidgetLib?             @relation(fields: [widgetLibId], references: [id])
  widgetLibId           Int?
  category              WidgetCategory
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  widgetInstances       WidgetInstance[]
}

model WidgetSlot {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @unique
  ownerId               Int
  owner                 User                   @relation(fields: [ownerId], references: [id])
  widgetSlotAssignments WidgetSlotAssignment[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  widgetSlotInstances   WidgetSlotInstance[]
}

model WidgetSlotAssignment {
  widgetId   Int
  slotId     Int
  widget     Widget     @relation(fields: [widgetId], references: [id])
  slot       WidgetSlot @relation(fields: [slotId], references: [id])
  ownerId    Int
  owner      User       @relation(fields: [ownerId], references: [id])
  assignedAt DateTime   @default(now())

  @@id([widgetId, slotId])
}

enum WidgetPlatformType {
  PcWeb
  MobileWeb
  MiniProgram
  NativeMobile
  DesktopClient
}

enum ProjectType {
  View
  DataTable
  Bluemap
}

enum WidgetCategory {
  General
  Layout
  Navigation
  DataEntry
  DataDisplay
  Feedback
  Other
  Heavyweight
}
