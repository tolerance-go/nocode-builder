// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider = "prisma-class-generator"
  dryRun   = false
  output   = "../src/generated/prisma-class" // 指定生成实体类的输出目录
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  email         String?        @unique
  password      String
  projects      Project[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  projectGroups ProjectGroup[]
  timeChunk     TimeChunk[]
}

model Project {
  id             Int                @id @default(autoincrement())
  name           String
  ownerId        Int
  owner          User               @relation(fields: [ownerId], references: [id])
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  projectGroup   ProjectGroup?      @relation(fields: [projectGroupId], references: [id])
  projectGroupId Int?
  operations     ProjectOperation[]
}

model ProjectGroup {
  id            Int                     @id @default(autoincrement())
  name          String
  parentGroupId Int?
  parentGroup   ProjectGroup?           @relation("ChildGroups", fields: [parentGroupId], references: [id])
  childGroups   ProjectGroup[]          @relation("ChildGroups")
  ownerId       Int
  owner         User                    @relation(fields: [ownerId], references: [id])
  projects      Project[]
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  operations    ProjectGroupOperation[]
}

model TimeChunk {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  timeNodes   TimeNode[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model TimeNode {
  id                      Int                    @id @default(autoincrement())
  timeChunkId             Int
  timeChunk               TimeChunk              @relation(fields: [timeChunkId], references: [id])
  projectOperationId      Int?                   @unique
  projectOperation        ProjectOperation?      @relation(fields: [projectOperationId], references: [id])
  projectGroupOperationId Int?                   @unique
  ProjectGroupOperation   ProjectGroupOperation? @relation(fields: [projectGroupOperationId], references: [id])
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
}

model ProjectOperation {
  id                       Int                     @id @default(autoincrement())
  projectId                Int
  project                  Project                 @relation(fields: [projectId], references: [id])
  projectCreateOperationId Int?                    @unique
  projectUpdateOperationId Int?                    @unique
  projectDeleteOperationId Int?                    @unique
  timeNode                 TimeNode?
  projectUpdateOperation   ProjectUpdateOperation?
  projectDeleteOperation   ProjectDeleteOperation?
  projectCreateOperation   ProjectCreateOperation?
}

model ProjectGroupOperation {
  id                            Int                          @id @default(autoincrement())
  projectGroupId                Int
  projectGroup                  ProjectGroup                 @relation(fields: [projectGroupId], references: [id])
  projectGroupCreateOperationId Int?                         @unique
  projectGroupUpdateOperationId Int?                         @unique
  projectGroupDeleteOperationId Int?                         @unique
  timeNode                      TimeNode?
  projectGroupCreateOperation   ProjectGroupCreateOperation?
  projectGroupUpdateOperation   ProjectGroupUpdateOperation?
  projectGroupDeleteOperation   ProjectGroupDeleteOperation?
}

model ProjectCreateOperation {
  id                 Int              @id @default(autoincrement())
  recordId           Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  projectOperation   ProjectOperation @relation(fields: [projectOperationId], references: [id])
  projectOperationId Int              @unique
}

model ProjectUpdateOperation {
  id                 Int              @id @default(autoincrement())
  recordId           Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  projectOperation   ProjectOperation @relation(fields: [projectOperationId], references: [id])
  projectOperationId Int              @unique
}

model ProjectDeleteOperation {
  id                 Int              @id @default(autoincrement())
  recordId           Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  projectOperation   ProjectOperation @relation(fields: [projectOperationId], references: [id])
  projectOperationId Int              @unique
}

model ProjectGroupCreateOperation {
  id                      Int                   @id @default(autoincrement())
  recordId                Int
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  projectGroupOperation   ProjectGroupOperation @relation(fields: [projectGroupOperationId], references: [id])
  projectGroupOperationId Int                   @unique
}

model ProjectGroupUpdateOperation {
  id                      Int                   @id @default(autoincrement())
  recordId                Int
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  projectGroupOperation   ProjectGroupOperation @relation(fields: [projectGroupOperationId], references: [id])
  projectGroupOperationId Int                   @unique
}

model ProjectGroupDeleteOperation {
  id                      Int                   @id @default(autoincrement())
  recordId                Int
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  projectGroupOperation   ProjectGroupOperation @relation(fields: [projectGroupOperationId], references: [id])
  projectGroupOperationId Int                   @unique
}
