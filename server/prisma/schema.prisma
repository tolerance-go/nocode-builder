// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  email         String?        @unique
  password      String
  projects      Project[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  projectGroups ProjectGroup[]
  timeChunk     TimeChunk[]
}

model Project {
  id             Int           @id @default(autoincrement())
  name           String
  ownerId        Int
  owner          User          @relation(fields: [ownerId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  projectGroup   ProjectGroup? @relation(fields: [projectGroupId], references: [id])
  projectGroupId Int?
}

model ProjectGroup {
  id            Int            @id @default(autoincrement())
  name          String
  parentGroupId Int?
  parentGroup   ProjectGroup?  @relation("ChildGroups", fields: [parentGroupId], references: [id])
  childGroups   ProjectGroup[] @relation("ChildGroups")
  ownerId       Int
  owner         User           @relation(fields: [ownerId], references: [id])
  projects      Project[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model TimeChunk {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  timeNodes   TimeNode[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model TimeNode {
  id          Int       @id @default(autoincrement())
  timeChunkId Int
  timeChunk   TimeChunk @relation(fields: [timeChunkId], references: [id])
  operationId Int       @unique
  operation   Operation @relation(fields: [operationId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Operation {
  id        Int       @id @default(autoincrement())
  tableName String
  recordId  Int
  action    String // "CREATE", "DELETE", "UPDATE", etc.
  timeNode  TimeNode?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
